'use strict'

/**
 * Thousands separator for number, eg: 78993 => 78,993
 * @param {Number} number
 * @param {Number} precision - digits of retain the decimal 
 * @return {String}
 */
exports.number = function(number, precision) {
  if (!number) return number
  return this.toFixed(number, precision).toString().replace(/(\d{1,3})(?=(\d{3})+(?:$|\.))/g, '$1,')
}

/**
 * Rounding a number to a particular number of decimal places, eg: 1.15 => 1.2
 * @param {Number} number
 * @param {Number} precision
 * @return {Number}
 */
exports.toFixed = function(number, precision) {
  var multiplier = Math.pow(10, precision || 0)
  return Math.round(number * multiplier) / multiplier
}

/**
 * Decimal to percentage, eg: 0.234 => '23.4%'
 * @param {Number} number
 * @param {Number} precision
 * @return {String}
 */
exports.percent = function(number, precision) {
  precision === undefined && (precision = 2)
  return (!isNaN(number) ? this.toFixed(number * 100, precision) : 0) + '%'
}

/**
 * DateFormatter, yyyy-mm-dd hh:ii:ss => 2015-08-01 15:30:01
 * @param {*} date - equal to the first parameter of new Date 
 * @param {String} format
 * @return {String}
 */
exports.date = function(date, format) {

  format = format || 'yyyy-mm-dd'

  if (!date) return

  var d = new Date(date)

  var rules = {
    'y+': d.getFullYear(),
    'm+': d.getMonth() + 1,
    'd+': d.getDate(),
    'h+': d.getHours(),
    'i+': d.getMinutes(),
    's+': d.getSeconds()
  }

  for (var k in rules) {
    format = format.replace(new RegExp(k), function(str) {
      var len = str.length
      var res = rules[k].toString()
      if (str[0] === 'y') {
        res = res.slice(-len)
      }
      if (res.length < len) {
        res = '0' + res
      }
      return res
    })
  }

  return format
}

/**
 * Filesize formatter, 19732 Byte => 19.7 KB
 * @param {Number} byte - bytesize of the file
 * @param {Number} precision
 * @return {String}
 */
exports.size = function(byte, precision) {
  var units = ['Byte', 'KB', 'MB', 'GB', 'TB']
  var level = 0

  function convert(size, precision) {
    if (size > 1000) {
      level++
      return convert.call(this, this.toFixed(size / 1000, precision), precision)
    }
    return size + ' ' + units[level]
  }
  return convert.apply(this, arguments)
}